h1. CakeAdmin Plugin

The best way to generate an awesome backend. Under heavy development.

h2. Background

I'm jealous of Django admin and think @cake bake@ is not the greatest to work with. So I started toying with my own "app skeleton":http://github.com/josegonzalez/app_skellington. I realized halfway through that it sucks to base everything on the DB. What if I want to include behaviors other than those included in app_skellington? Impossible.

So I started work on a Django admin for CakePHP. Here is the beginning of that. And it will rule. And you will love me. And you'll make oodles of cash from this likely. I'm hoping some of this goes to me, but I can dream, can't I?

h2. Requirements

* CakePHP 1.3
* Patience
* PHP 5.2+ with json_decode or PECL json 1.2+ (For Frontmatter parsing)

h2. Installation

_[Manual]_

# Download this: http://github.com/josegonzalez/cake_admin/zipball/master
# Unzip that download.
# Copy the resulting folder to app/plugins
# Rename the folder you just copied to @cake_admin@

_[GIT Submodule]_

In your app directory type:
<pre><code>git submodule add git://github.com/josegonzalez/cake_admin.git plugins/cake_admin
git submodule init
git submodule update
</code></pre>

_[GIT Clone]_

In your plugin directory type
<pre><code>git clone git://github.com/josegonzalez/cake_admin.git cake_admin</code></pre>

h2. Usage

Create a folder in your @app/libs@ folder called @admin@. This folder will contain all of your @CakeAdmin@ classes. We'll use a @Post@ model for our example admin section.

Create a @post_admin.php@ file in your @app/libs/admin@ folder. This will contain your @PostAdmin@ class. "This gist":http://gist.github.com/583603 is an example of such a class.

Once your @post_admin.php@ file has been created, run @cake admin@ from the shell. This will create the respective plugin if not already (in our case, an @admin@ plugin), as well as all the models, views, and controllers for ALL available @*_admin.php@ files. In our case, you can then access the admin section at @example.com/admin/posts@.

h2. Parsing

CakeAdmin constructs templates from a controller-centric approach. Many of the class methods in a @CakeAdmin@ subclass may seem to be related to Views, but in fact are used to describe the Controller and how it should shuffle data between the model and the view. In fact, the parsing order is as follows:

AppController => Controller => AppModel => Model => View

Because CakeAdmin takes a template agnostic approach, it may be useful to tell the @Model@ or @View@ to do something based upon the @Controller@ or @Action@ template's needs. It will not always be possible to complete these tasks, depending upon the templates in use, but CakeAdmin will allow the use of template Frontmatter to define needs for each template.

CakeAdmin Frontmatter is much the same as for "Jekyll":http://github.com/mojombo/jekyll, but is more json-ish for ease of native parsing. All frontmatter is removed from the resulting template, but is passed on as a json_decoded object to future templates. For the moment, only controller actions can have frontmatter, but this is subject to change as needed.

h3. Frontmatter

Frontmatter can be specified in a json-like manner. It is relatively lenient, but commas must be specified to separate key->value pairs. The outermost wrapping @{}@ - curly braces - have been replaced with wrapping @---@ - a sequence of three dashes - as is done for Jekyll templates.

Keys need not be wrapped in quotation marks, but string values MUST be wrapped as such.

Arrays and objects work just as in normal json, except for the outermost braces.

For controllers, Standard keys and their usages are:

* title: Title of the action name
* description: Description of the action name
* finders: Finder methods that need to be set for the model
* related: Related finder methods that need to be set for the model

Using frontmatter is a neat way of specifying extra data that can be used by other templates further on down the compilation step. It can be thought of as a really bad implementation of evented programming.

h3. Model Validation Rules

Validation rules are parsed in two steps. The @CakeAdmin@ @__construct()@ method parses each validation rule for a message and a rule. If the message is not found, then a generic message is attached. This avoids the need to edit the model file at a later date.

The default validation rules can be overridden easily. They are defined within the @CakeAdmin@ class. The following is default set:

<pre><code>
/**
 * Default Validation Messages
 *
 * Messages may contain the string `{{field}}` in order to support
 * inclusion of fieldnames via str_replace
 *
 * Rules that have parameters may include those parameters as {{parameter}}
 *
 * When overriding these in sub-classes, remember to either override
 * in the __construct() method to array_merge with the defaults, or
 * specify all the messages that may be used
 *
 * @var string
 */
    var $_validationMessages = array(
        'alphanumeric'  => '{{field}} must only contain letters and numbers',
        'between'       => '{{field}} must be between {{min}} and {{max}} characters long',
        'blank'         => '{{field}} must be blank or contain only whitespace characters',
        'boolean'       => 'Incorrect value for {{field}}',
        'cc'            => 'The credit card number you supplied was invalid',
        'comparison'    => '{{field}} must be {{comparison}} to {{value}}',
        'date'          => 'Enter a valid date in {{format}} format',
        'decimal'       => '{{field}} must be a valid decimal number with at least {{length}} decimal points',
        'email'         => '{{field}} must be a valid email address',
        'equalTo'       => '{{field}} must be equal to {{number}}',
        'extension'     => '{{field}} must have a valid extension',
        'file'          => '{{field}} must be a valid file name',
        'ip'            => '{{field}} must be a valid IP address',
        'inlist'        => 'Your selection for {{field}} must be in the given list',
        'isunique'      => 'This {{field}} has already been taken',
        'maxlength'     => '{{field}} must have less than {{length}} characters',
        'minlength'     => '{{field}} must have at least {{length}} characters',
        'money'         => '{{field}} must be a valid monetary amount',
        'multiple'      => 'You must select at least {{min}} and no more than {{max}} options for {{field}}',
        'numeric'       => '{{field}} must be numeric',
        'notempty'      => '{{field}} cannot be empty',
        'phone'         => '{{field}} must be a valid phone number',
        'postal'        => '{{field}} must be a valid postal code',
        'range'         => '{{field}} must be between {{min}} and {{max}}',
        'ssn'           => '{{field}} must be a valid social security number',
        'url'           => '{{field}} must be a valid url',
    );
</code></pre>

If you would like to override them within your own admin classes, either include the above in your variable declaration, or override in the @__construct()@ method:

<pre><code>
    function __construct() {
        $this->_validationMessages = array_merge(array(
            'custom' => 'Custom message for {{field}}'),
            $this->_validationMessages
        );
        parent::__construct();
    }
</code></pre>

All the default validation rules work as normal, with option parsing and everything. For example, given:

<pre><code>
    var $validations    = array(
        'content'   => array(
            'required'  => 'notempty',
            'maxLength' => array('maxLength', 255),
            'inList' => array(
                'rule' => array('inList', array(true, 'b', null)),
                'allowEmpty' => true,
                'on' => 'create',
                'message' => 'Please be in the good list'
            )
        )
    );
</code></pre>

@CakeAdmin@ will generate the following @__construct()@ method:

<pre><code>
    function __construct($id = false, $table = null, $ds = null) {
        parent::__construct($id, $table, $ds);
        $this->validate = array(
            'content' => array(
                'required' => array(
                    'rule' => array('notempty'),
                    'message' => __d('admin', 'Content cannot be empty', true),
                ),
                'maxLength' => array(
                    'rule' => array('maxLength', 255),
                    'message' => __d('admin', 'Content must have less than 255 characters', true),
                ),
                'inList' => array(
                    'rule' => array('inList', array(true, 'b', null)),
                    'allowEmpty' => true,
                    'on' => 'create',
                    'message' => __d('admin', 'Please be in the good list', true),
                ),
            ),
        );
    }
</code></pre>

All validation rules are wrapped in domain-specific internationalization calls - @__d()@ - meaning it is possible to further internationalize your generated admin section without mucking with the included classes.

h2. TODO

* Unit Tests!!!
* View Templates and partials
* More extensive docs
* Theme support
* Better Warnings
* App Template support
* Support for admin files in plugins
* Global layout partials
* Screencast

h2. License

Copyright (c) 2010 Jose Diaz-Gonzalez

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.